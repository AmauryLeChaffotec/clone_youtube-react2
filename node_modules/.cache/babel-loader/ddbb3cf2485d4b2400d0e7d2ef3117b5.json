{"ast":null,"code":"var _jsxFileName = \"/home/amaury/dev_experimentation/youtube-clone/src/components/SearchPage/SearchPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport \"./SearchPage.css\";\nimport TuneIcon from '@material-ui/icons/Tune';\nimport ChannelRow from './../ChannelRow/ChannelRow';\nimport VideoRow from './../VideoRow/VideoRow';\nimport { useParams } from 'react-router';\nimport axios from 'axios';\nimport { DateTime } from 'luxon';\nimport { Link } from 'react-router-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\n\nconst SearchPage = props => {\n  let {\n    searchQuery\n  } = useParams();\n  const [channelRow, setChannelRow] = useState('');\n  const [videoRows, setVideoRows] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    setChannelRow('');\n    setVideoRows([]);\n    axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=1&type=channel&q=${searchQuery}&safeSearch=none&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`).then(response => {\n      createChannelRow(response.data['items'][0]);\n    });\n    axios.get(`https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=9&type=video&q=${searchQuery}&safeSearch=none&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`).then(response => {\n      createVideoRows(response.data['items']);\n      setIsError(false);\n    }).catch(error => {\n      console.log(error);\n      setIsError(true);\n      setIsLoading(false);\n    });\n  }, [searchQuery]);\n\n  async function createChannelRow(channel) {\n    const channelId = channel.id.channelId;\n    const response = await axios.get(`https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${channelId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`);\n    const noOfVideos = response.data.items[0].statistics.videoCount;\n    const subs = response.data.items[0].statistics.subscriberCount;\n    const snippet = channel.snippet;\n    const title = snippet.title;\n    const description = snippet.description;\n    const image = snippet.thumbnails.medium.url;\n    setChannelRow({\n      channelId,\n      image,\n      title,\n      subs,\n      noOfVideos,\n      description\n    });\n  }\n\n  async function createVideoRows(videos) {\n    let newVideoRows = [];\n\n    for (const video of videos) {\n      const videoId = video.id.videoId;\n      const response = await axios.get(`https://www.googleapis.com/youtube/v3/videos?part=statistics%2C%20snippet&id=${videoId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`);\n      const views = response.data.items[0].statistics.viewCount;\n      const snippet = video.snippet;\n      const title = snippet.title;\n      const timestamp = DateTime.fromISO(snippet.publishedAt).toRelative();\n      const channel = snippet.channelTitle;\n      const description = snippet.description;\n      const image = snippet.thumbnails.medium.url;\n      newVideoRows.push({\n        videoId,\n        title,\n        image,\n        views,\n        timestamp,\n        channel,\n        description\n      });\n    }\n\n    ;\n    setVideoRows(newVideoRows);\n    setIsLoading(false);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 14\n      }\n    }, \"No Results found!\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchpage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchpage__filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TuneIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, \"Filter\")), isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    className: \"loading\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 27\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), !isLoading ? /*#__PURE__*/React.createElement(ChannelRow, {\n    key: channelRow.channelId,\n    image: channelRow.image,\n    channel: channelRow.title,\n    subs: channelRow.subs,\n    noOfVideos: channelRow.noOfVideos,\n    description: channelRow.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 28\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }), videoRows.map(item => {\n    return /*#__PURE__*/React.createElement(Link, {\n      key: item.videoId,\n      to: `/video/${item.videoId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(VideoRow, {\n      title: item.title,\n      image: item.image,\n      views: item.views,\n      timestamp: item.timestamp,\n      channel: item.channel,\n      description: item.description,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 27\n      }\n    }));\n  }));\n};\n\nexport default SearchPage;","map":{"version":3,"sources":["/home/amaury/dev_experimentation/youtube-clone/src/components/SearchPage/SearchPage.js"],"names":["React","useState","useEffect","TuneIcon","ChannelRow","VideoRow","useParams","axios","DateTime","Link","CircularProgress","Alert","SearchPage","props","searchQuery","channelRow","setChannelRow","videoRows","setVideoRows","isLoading","setIsLoading","isError","setIsError","get","process","env","REACT_APP_YOUTUBE_API_KEY","then","response","createChannelRow","data","createVideoRows","catch","error","console","log","channel","channelId","id","noOfVideos","items","statistics","videoCount","subs","subscriberCount","snippet","title","description","image","thumbnails","medium","url","videos","newVideoRows","video","videoId","views","viewCount","timestamp","fromISO","publishedAt","toRelative","channelTitle","push","map","item"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport \"./SearchPage.css\";\nimport TuneIcon from '@material-ui/icons/Tune';\nimport ChannelRow from './../ChannelRow/ChannelRow';\nimport VideoRow from './../VideoRow/VideoRow';\nimport {useParams} from 'react-router';\nimport axios from 'axios';\nimport {DateTime} from 'luxon';\nimport { Link } from 'react-router-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\n\n\nconst SearchPage = (props) => {\n    let { searchQuery } = useParams();\n    \n    const [channelRow, setChannelRow] = useState('');\n    const [videoRows, setVideoRows] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n      setChannelRow('');\n      setVideoRows([]);\n      axios\n        .get(`https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=1&type=channel&q=${searchQuery}&safeSearch=none&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\n        .then(response => {\n          createChannelRow(response.data['items'][0]);\n        })\n        \n\n        axios\n        .get(`https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=9&type=video&q=${searchQuery}&safeSearch=none&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\n        .then(response => {\n          createVideoRows(response.data['items']);\n          setIsError(false);\n        })\n        .catch(error => {\n          console.log(error);\n          setIsError(true);\n          setIsLoading(false);\n        })\n\n    }, [searchQuery])\n\n\n    async function createChannelRow(channel) {\n      const channelId = channel.id.channelId;\n      const response = await axios\n                              .get(`https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${channelId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\n      const noOfVideos = response.data.items[0].statistics.videoCount;\n      const subs = response.data.items[0].statistics.subscriberCount;\n      const snippet = channel.snippet;\n      const title = snippet.title;\n      const description = snippet.description;\n      const image = snippet.thumbnails.medium.url;\n      setChannelRow({\n        channelId,\n        image,\n        title,\n        subs,\n        noOfVideos,\n        description\n      });\n    }\n\n    async function createVideoRows(videos) {\n      let newVideoRows = [];\n      for (const video of videos) {\n        const videoId = video.id.videoId;\n        const response = await axios\n                                .get(`https://www.googleapis.com/youtube/v3/videos?part=statistics%2C%20snippet&id=${videoId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\n        const views = response.data.items[0].statistics.viewCount;\n        const snippet = video.snippet;\n        const title = snippet.title;\n        const timestamp = DateTime.fromISO(snippet.publishedAt).toRelative();\n        const channel = snippet.channelTitle;\n        const description = snippet.description;\n        const image = snippet.thumbnails.medium.url;\n                            \n        newVideoRows.push({\n          videoId,\n          title,\n          image,\n          views,\n          timestamp,\n          channel, \n          description\n        });\n      };\n      setVideoRows(newVideoRows);\n      setIsLoading(false);\n    }\n    if (isError) {\n      return <Alert severity=\"error\" className='loading'>No Results found!</Alert>\n    }\n    return (\n        <div className=\"searchpage\">\n            <div className=\"searchpage__filter\">\n                <TuneIcon />\n                <h2>Filter</h2>\n            </div>\n            { isLoading ? <CircularProgress className='loading' color='secondary' /> : null }\n            <hr />\n            { !isLoading ? <ChannelRow \n                                  key={channelRow.channelId}\n                                  image={channelRow.image}\n                                  channel={channelRow.title}\n                                  subs={channelRow.subs}\n                                  noOfVideos={channelRow.noOfVideos}\n                                  description={channelRow.description}\n                            /> : null\n            }\n            <hr />\n            {\n              videoRows.map(item => {\n                return (\n                        <Link key={item.videoId} to={`/video/${item.videoId}`}>\n                          <VideoRow\n                            title={item.title}\n                            image={item.image}\n                            views={item.views}\n                            timestamp={item.timestamp}\n                            channel={item.channel}\n                            description={item.description}\n                          />\n                        </Link>\n                )\n              })\n              \n            }   \n            \n        </div>\n    )\n}\n\nexport default SearchPage;\n"]},"metadata":{},"sourceType":"module"}