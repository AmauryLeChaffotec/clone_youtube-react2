{"ast":null,"code":"var _jsxFileName = \"/home/amaury/dev_experimentation/youtube-clone/src/components/VideoPlayer/VideoPlayer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport Video from './../Video/Video';\nimport './VideoPlayer.css';\nimport RecommendedVideos from '../RecommendedVideos/RecommendedVideos';\nimport VideoInfo from '../VideoInfo/VideoInfo';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\n\nconst VideoPlayer = () => {\n  let {\n    videoId\n  } = useParams();\n  const [videoInfo, setVideoInfo] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    setVideoInfo([]);\n    setIsLoading(true);\n    axios.get(`https://www.googleapis.com/youtube/v3/videos?part=snippet%2C%20statistics&id=${videoId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`).then(response => {\n      createVideoInfo(response.data['items'][0]);\n      setIsError(false);\n    }).catch(error => {\n      console.log(error);\n      setIsError(true);\n    });\n  }, [videoId]);\n\n  async function createVideoInfo(video) {\n    const snippet = video.snippet;\n    const stats = video.statistics;\n    const channelId = snippet.channelId;\n    const response = await axios.get(`https://www.googleapis.com/youtube/v3/channels?part=snippet%2C%20statistics&id=${channelId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`);\n    const channelImage = response.data.items[0].snippet.thumbnails.medium.url;\n    const subs = response.data.items[0].statistics.subscriberCount;\n    const publishedDate = new Date(snippet.publishedAt).toLocaleDateString('en-GB', {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    });\n    const title = snippet.title;\n    const description = snippet.description;\n    const channelTitle = snippet.channelTitle;\n    const viewCount = stats.viewCount;\n    const likeCount = stats.likeCount;\n    const dislikeCount = stats.dislikeCount;\n    setVideoInfo({\n      title,\n      description,\n      publishedDate,\n      channelTitle,\n      channelImage,\n      viewCount,\n      likeCount,\n      dislikeCount,\n      subs\n    });\n    setIsLoading(false);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 16\n      }\n    }, \"No Results found!\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"videoplayer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"videoplayer__videodetails\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"videoplayer__videoinfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, !isLoading ? /*#__PURE__*/React.createElement(VideoInfo, {\n    title: videoInfo.snippet,\n    description: videoInfo.description,\n    publishedDate: videoInfo.publishedDate,\n    channelTitle: videoInfo.channelTitle,\n    channelImage: videoInfo.channelImage,\n    viewCount: videoInfo.viewCount,\n    likeCount: videoInfo.likeCount,\n    dislikeCount: videoInfo.dislikeCount,\n    subs: videoInfo.subs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 35\n    }\n  }) : null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"videoplayer__suggested\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RecommendedVideos, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default VideoPlayer;","map":{"version":3,"sources":["/home/amaury/dev_experimentation/youtube-clone/src/components/VideoPlayer/VideoPlayer.js"],"names":["React","useState","useEffect","useParams","Video","RecommendedVideos","VideoInfo","axios","CircularProgress","Alert","VideoPlayer","videoId","videoInfo","setVideoInfo","isLoading","setIsLoading","isError","setIsError","get","process","env","REACT_APP_YOUTUBE_API_KEY","then","response","createVideoInfo","data","catch","error","console","log","video","snippet","stats","statistics","channelId","channelImage","items","thumbnails","medium","url","subs","subscriberCount","publishedDate","Date","publishedAt","toLocaleDateString","day","month","year","title","description","channelTitle","viewCount","likeCount","dislikeCount"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {useParams} from 'react-router';\nimport Video from './../Video/Video'\nimport './VideoPlayer.css';\nimport RecommendedVideos from '../RecommendedVideos/RecommendedVideos';\nimport VideoInfo from '../VideoInfo/VideoInfo';\nimport axios from 'axios';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\n\nconst VideoPlayer = () => {\n    let { videoId } = useParams();\n\n    const [videoInfo, setVideoInfo] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        setVideoInfo([]);\n        setIsLoading(true);\n        axios\n          .get(`https://www.googleapis.com/youtube/v3/videos?part=snippet%2C%20statistics&id=${videoId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\n          .then(response => {\n              createVideoInfo(response.data['items'][0]);\n              setIsError(false);\n          })\n          .catch(error => {\n              console.log(error);\n              setIsError(true);\n          })\n    }, [videoId])\n\n    async function createVideoInfo (video) {\n        const snippet = video.snippet;\n        const stats = video.statistics;\n        const channelId = snippet.channelId;\n        const response = await axios\n                              .get(`https://www.googleapis.com/youtube/v3/channels?part=snippet%2C%20statistics&id=${channelId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\n        \n        const channelImage = response.data.items[0].snippet.thumbnails.medium.url;\n        const subs = response.data.items[0].statistics.subscriberCount;\n        const publishedDate = new Date(snippet.publishedAt).toLocaleDateString('en-GB', {  \n                                                                day : 'numeric',\n                                                                month : 'short',\n                                                                year : 'numeric'\n                                                            });\n        const title = snippet.title;\n        const description = snippet.description;\n        const channelTitle = snippet.channelTitle;\n        const viewCount = stats.viewCount;\n        const likeCount = stats.likeCount;\n        const dislikeCount = stats.dislikeCount;\n\n        setVideoInfo({\n            title,\n            description,\n            publishedDate,\n            channelTitle,\n            channelImage,\n            viewCount,\n            likeCount,\n            dislikeCount,\n            subs\n        });\n        setIsLoading(false);\n    }\n    if(isError) {\n        return <Alert severity=\"error\" className='loading'>No Results found!</Alert>\n    }\n    return (\n        <div className='videoplayer'>\n            <div className='videoplayer__videodetails'>\n                {/* <div className='videoplayer__video'>\n                    {isLoading ? <CircularProgress className='loading' color='secondary'/> : <Video videoId={videoId} /> }\n                </div> */}\n                <div className='videoplayer__videoinfo'>\n                    {!isLoading ? <VideoInfo\n                                    title={videoInfo.snippet}\n                                    description={videoInfo.description}\n                                    publishedDate={videoInfo.publishedDate}\n                                    channelTitle={videoInfo.channelTitle}\n                                    channelImage={videoInfo.channelImage}\n                                    viewCount={videoInfo.viewCount}\n                                    likeCount={videoInfo.likeCount}\n                                    dislikeCount={videoInfo.dislikeCount}\n                                    subs={videoInfo.subs}\n                                  /> : null\n                    }\n                </div>\n            </div>\n            <div className='videoplayer__suggested'>\n                <RecommendedVideos />\n            </div>\n        </div>\n    )\n}\n\nexport default VideoPlayer;\n"]},"metadata":{},"sourceType":"module"}