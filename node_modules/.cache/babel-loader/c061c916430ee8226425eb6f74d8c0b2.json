{"ast":null,"code":"var _jsxFileName = \"/home/amaury/dev_experimentation/youtube-clone/src/components/RecommendedVideos/RecommendedVideos.js\";\nimport React, { useEffect, useState } from 'react';\nimport VideoCard from './../VideoCard/VideoCard';\nimport './RecommendedVideos.css';\nimport axios from 'axios';\nimport { DateTime } from 'luxon';\nimport { Link } from 'react-router-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\n\nconst RecommendedVideos = () => {\n  const [videoCards, setVideoCards] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    axios.get(`https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=15&regionCode=FR&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`).then(response => {\n      createVideoCards(response.data.items);\n    }).catch(error => {\n      console.log(error);\n      setIsError(true);\n    });\n  }, []);\n\n  async function createVideoCards(videoItems) {\n    let newVideoCards = [];\n\n    for (const video of videoItems) {\n      const videoId = video.id;\n      const snippet = video.snippet;\n      const channelId = snippet.channelId;\n      const response = await axios.get(`https://www.googleapis.com/youtube/v3/channels?part=snippet&id=${channelId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`);\n      const channelImage = response.data.items[0].snippet.thumbnails.medium.url;\n      console.log('channel image');\n      console.log(`https://www.googleapis.com/youtube/v3/channels?part=snippet&id=${channelId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`);\n      const title = snippet.title;\n      const image = snippet.thumbnails.medium.url;\n      const views = video.statistics.viewCount;\n      const timestamp = DateTime.fromISO(snippet.publishedAt).toRelative();\n      const channel = snippet.channelTitle;\n      newVideoCards.push({\n        videoId,\n        image,\n        title,\n        channel,\n        views,\n        timestamp,\n        channelImage\n      });\n    }\n\n    ;\n    setVideoCards(newVideoCards);\n    console.log();\n    setIsLoading(false);\n  }\n\n  if (isError) {\n    return /*#__PURE__*/React.createElement(Alert, {\n      severity: \"error\",\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }\n    }, \"No Results found!\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommendedvideos\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    className: \"loading\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 27\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"recommendedvideos__videos\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, videoCards.map(item => {\n    return /*#__PURE__*/React.createElement(Link, {\n      key: item.videoId,\n      to: `/video/${item.videoId}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(VideoCard, {\n      title: item.title,\n      image: item.image,\n      views: item.views,\n      timestamp: item.timestamp,\n      channel: item.channel,\n      channelImage: item.channelImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 31\n      }\n    }));\n  })));\n};\n\nexport default RecommendedVideos;","map":{"version":3,"sources":["/home/amaury/dev_experimentation/youtube-clone/src/components/RecommendedVideos/RecommendedVideos.js"],"names":["React","useEffect","useState","VideoCard","axios","DateTime","Link","CircularProgress","Alert","RecommendedVideos","videoCards","setVideoCards","isLoading","setIsLoading","isError","setIsError","get","process","env","REACT_APP_YOUTUBE_API_KEY","then","response","createVideoCards","data","items","catch","error","console","log","videoItems","newVideoCards","video","videoId","id","snippet","channelId","channelImage","thumbnails","medium","url","title","image","views","statistics","viewCount","timestamp","fromISO","publishedAt","toRelative","channel","channelTitle","push","map","item"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport VideoCard from './../VideoCard/VideoCard';\nimport './RecommendedVideos.css';\nimport axios from 'axios';\nimport {DateTime} from 'luxon';\nimport { Link } from 'react-router-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\n\n\nconst RecommendedVideos = () => {\n\n    const [videoCards, setVideoCards] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n      axios\n        .get(`https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&chart=mostPopular&maxResults=15&regionCode=FR&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\n        .then(response => {\n          createVideoCards(response.data.items);\n        })\n        .catch(error => {\n          console.log(error);\n          setIsError(true);\n        })\n    }, [])\n\n    async function createVideoCards(videoItems) {\n      let newVideoCards = [];\n      for (const video of videoItems) {\n        const videoId = video.id;\n        const snippet = video.snippet;\n        const channelId = snippet.channelId;\n        const response = await axios\n                              .get(`https://www.googleapis.com/youtube/v3/channels?part=snippet&id=${channelId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\n        const channelImage = response.data.items[0].snippet.thumbnails.medium.url;\n        console.log('channel image')\n        console.log(`https://www.googleapis.com/youtube/v3/channels?part=snippet&id=${channelId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\n\n        const title = snippet.title;\n        const image = snippet.thumbnails.medium.url;\n        const views = video.statistics.viewCount;\n        const timestamp = DateTime.fromISO(snippet.publishedAt).toRelative();\n        const channel = snippet.channelTitle;\n\n        newVideoCards.push({\n          videoId,\n          image,\n          title,\n          channel,\n          views,\n          timestamp,\n          channelImage\n        });\n      };\n      setVideoCards(newVideoCards);\n      console.log()\n      setIsLoading(false);\n    }\n\n    if(isError) {\n      return <Alert severity=\"error\" className='loading'>No Results found!</Alert>\n    }\n    return (\n        \n        <div className='recommendedvideos'>\n            { isLoading ? <CircularProgress className='loading' color='secondary' /> : null }\n            <div className=\"recommendedvideos__videos\">\n                {\n                  videoCards.map(item => {\n                    return (\n                            <Link key={item.videoId} to={`/video/${item.videoId}`}>\n                              <VideoCard \n                                title={item.title}\n                                image={item.image}\n                                views={item.views}\n                                timestamp={item.timestamp}\n                                channel={item.channel}\n                                channelImage={item.channelImage}\n                              />\n                            </Link>\n                    )\n                  })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default RecommendedVideos;\n"]},"metadata":{},"sourceType":"module"}